name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --release --verbose

    - name: Build examples
      run: cargo build --examples --release --verbose

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish to crates.io
      run: cargo publish

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, publish]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{steps.github_release.outputs.changelog}}
        draft: false
        prerelease: false

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cx-framework-linux-x64
          - os: windows-latest  
            target: x86_64-pc-windows-msvc
            artifact_name: cx-framework-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: cx-framework-macos-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev

    - name: Build examples
      run: cargo build --examples --release --target ${{ matrix.target }}

    - name: Create artifact directory
      run: mkdir -p artifacts

    - name: Copy examples (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/examples/basic_window artifacts/
        cp target/${{ matrix.target }}/release/examples/button_demo artifacts/
        cp README.md artifacts/
        cp LICENSE artifacts/

    - name: Copy examples (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\examples\basic_window.exe artifacts\
        copy target\${{ matrix.target }}\release\examples\button_demo.exe artifacts\
        copy README.md artifacts\
        copy LICENSE artifacts\

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/